getwd()
# Project 1, Task 2.
periodic.y = read.csv("Y.csv")
periodic.x = read.csv("X.csv")
periodic.y
periodic.x = read.csv("X.csv")
periodic.y = read.csv("Y.csv")
mean(periodic.x$all_..idle)
mean(periodic.x[,all_..idle])
mean(periodic.x[,'all_..idle'])
periodic.test.x = periodic.x[7001:10000,]
mean(periodic.test.x[,'all_..idle'])
splitdata <- function(length,seed=NULL){
if(!is.null(seed)) {
set.seed(seed)
}
index <- 1:nrow(predictorDataSet)
trainIndex <- sample(index, 0.7 * length,replace=FALSE)
return trainIndex
}
splitdata <- function(length,seed=NULL) {
if(!is.null(seed)) {
set.seed(seed)
}
index <- 1:nrow(predictorDataSet)
trainIndex <- sample(index, 0.7 * length,replace=FALSE)
return trainIndex
}
splitdata <- function(length,seed=NULL) {
if(!is.null(seed)) {
set.seed(seed)
}
index <- 1:nrow(predictorDataSet)
trainIndex <- sample(index, (0.7*length) , replace=FALSE)
return trainIndex
}
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
splitdata <- function(length,seed=NULL) {
if(!is.null(seed)) {
set.seed(seed)
}
index <- 1:length
trainIndex <- sample(index, (0.7*length(index)) , replace=FALSE)
return trainIndex
}
splitdata <- function(length,seed=NULL) {
if(!is.null(seed)) {
set.seed(seed)
}
index <- 1:length
trainIndex <- sample(index, (0.7*length(index)) , replace=FALSE)
}
# Read the Predictors.
periodic.x = read.csv("X.csv")
View(periodic.x)
# Instead of choosing a sequential set, create a random set. (Replace = False.)
splitdata <- function(length,seed=NULL) {
if(!is.null(seed)) {
set.seed(seed)
}
index <- 1:length
trainIndex <- sample(index, (0.7*length(index)) , replace=FALSE)
}
trainIndex = splitdata(nrow(periodic.x),29)
periodic.y = read.csv("Y.csv")
periodic.training.x = periodic.x[trainIndex,]
periodic.training.y = periodic.y[trainIndex,]
periodic.test.x = periodic.x[-trainingIndex,]
periodic.test.y = periodic.y[-trainingIndex,]
# Create the test sets
periodic.test.x = periodic.x[-trainIndex,]
periodic.test.y = periodic.y[-trainIndex,]
# Read Data into X
periodic.x = read.csv("X.csv")
# Read Data into Y.
periodic.y = read.csv("Y.csv")
# Instead of choosing a sequential set, create a random set. (Replace = False.)
splitdata <- function(length,seed=NULL) {
if(!is.null(seed)) {
set.seed(seed)
}
index <- 1:length
trainIndex <- sample(index, (0.7*length(index)) , replace=FALSE)
}
# Use any data to get a random training index.
trainIndex = splitdata(nrow(periodic.x),29)
predictor-sum = "all_..idle" + "X..memused" + "X..swpused" + "proc.s" + "cswch.s" + "file.nr" + "sum_intr.s" + "rtps" + "ldavg.1" + "tcpsck"
# Read Data into X
periodic.x = read.csv("X.csv")
# Read Data into Y.
periodic.y = read.csv("Y.csv")
# Instead of choosing a sequential set, create a random set. (Replace = False.)
splitdata <- function(length,seed=NULL) {
if(!is.null(seed)) {
set.seed(seed)
}
index <- 1:length
trainIndex <- sample(index, (0.7*length(index)) , replace=FALSE)
}
# Use any data to get a random training index.
trainIndex = splitdata(nrow(periodic.x),29)
# Create the training sets.
periodic.training.x = periodic.x[trainIndex,]
periodic.training.y = periodic.y[trainIndex,]
# Create the test sets
periodic.test.x = periodic.x[-trainIndex,]
periodic.test.y = periodic.y[-trainIndex,]
training-data-list = list(periodic.training.x, periodic.training.y)
test-data-list = list(periodic.test.x,periodic.test.y)
# Create a list of training data sets.
trainingDataList = list(periodic.training.x, periodic.training.y)
testDataList = list(periodic.test.x,periodic.test.y)
lm.fit = lm(DispFrames~"all_..idle" + "X..memused" + "X..swpused" + "proc.s" + "cswch.s" + "file.nr" + "sum_intr.s" + "rtps" + "ldavg.1" + "tcpsck" , data = trainingDataList)
lm.fit = lm(DispFrames~all_..idle + X..memused,trainingDataList)
lm.fit = lm(DispFrames~all_..idle + X..memused)
lm.fit = lm('DispFrames'~all_..idle + X..memused)
lm.fit = lm(DispFrames~all_..idle + X..memused)
lm.fit = lm(all_..idle~X..memused)
lm.fit = lm(all_..idle~X..memused,periodic.test.x)
lm.fit = lm(all_..idle~X..memused,periodic.test.x)
summary(lm.fit)
remove(lm.fit)
remove(trainingDataList)
remove(testDataList)
lm.fit = lm(all_..idle~X..memused + X..swpused, periodic.training.x)
summary(lm.fit)
remove(lm.fit)
lm.fit = lm(all_..idle~X..memused + proc.s, periodic.training.x)
summary(lm.fit)
remove(lm.fit)
combinedTrainingMatrix <- cbind(periodic.training.x,periodic.training.y[,DispFrames])
combinedTrainingMatrix <- cbind(periodic.training.x,periodic.training.y$DispFrames)
lm.fit = lm(DispFrames~X..memused + proc.s, combinedTrainingMatrix)
a <- matrix(1:5000, nrow=100)
View(a)
a <- cbind(a,apply(a[,1:10],1,mean))
View(a)
remove(combinedTrainingMatrix)
combinedTrainingMatrix <- cbind(periodic.training.x,DispFrames = periodic.training.y$DispFrames)
lm.fit = lm(DispFrames~X..memused + proc.s, combinedTrainingMatrix)
summary(lm.fit)
remove(combinedTrainingMatrix)
lm.fit.DispFrames = lm(DispFrames~.-c(NoAudioPlayed,NoRTPPkts), combinedTrainingMatrix)
combineTrainingMatrix <- periodic.training.x
combinedTrainingMatrix <- cbind(combineTrainingMatrix, DispFrames = periodic.training.y$DispFrames)
combinedTrainingMatrix <- cbind(combinedTrainingMatrix, NoAudioPlayed = periodic.training.y$NoAudioPlayed)
remove(combineTrainingMatrix)
remove(combinedTrainingMatrix)
combinedTrainingMatrix <- periodic.training.x
## Add DispFrames.
combinedTrainingMatrix <- cbind(combinedTrainingMatrix, DispFrames = periodic.training.y$DispFrames)
## Add NoAudioPlayed
combinedTrainingMatrix <- cbind(combinedTrainingMatrix, NoAudioPlayed = periodic.training.y$NoAudioPlayed)
## Add NoRTPPkts
combinedTrainingMatrix <- cbind(combinedTrainingMatrix, NoRTPPkts = periodic.training.y$NoRTPPkts)
lm.fit.DispFrames = lm(DispFrames~.-c(NoAudioPlayed,NoRTPPkts), combinedTrainingMatrix)
lm.fit.DispFrames = lm(DispFrames~. -c(NoAudioPlayed,NoRTPPkts), combinedTrainingMatrix)
x <- c(1,2)
lm.fit.DispFrames = lm(DispFrames~.-NoAudioPlayed, combinedTrainingMatrix)
lm.fit.DispFrames <- update(lm.fit.DispFrames, ~.-NoRTPPkts)
summary(lm.fit.DispFrames)
